<!DOCTYPE html>

<html>

<head>

  <h1 style="font-family:verdana; font-size:50px"> Friends Spot</h1>

	<meta charset="utf-8" />
	<title>Friends Spot</title>

	<form action="/html/tags/html_form_tag_action.cfm" method="post">


<style type="text/css">



body
{

background-image:url('background.jpg');

}


#navigation 
{
	padding:10px 0px;
	width:175px;
}


#navigation a 
{
	background:#800000;
	display:block;
	height:150px;
	text-indent: 0px;
}



#navigation a{
text-decoration: none; 
font-family: Verdana, 
sans-serif; 
color:#FF0000;
text-align:center;
}

#navigation a.link1:hover {background-position:-146px 0px;}
#navigation a.link2 {background-position:0px -47px;}
#navigation a.link2:hover {background-position:-146px -47px;}
#navigation a.link3 {background-position:0px -94px;}
#navigation a.link3:hover{background-position:-146px -94px;}
#navigation a.link4 {background-position:0px -141px;}
#navigation a.link4:hover {background-position:-146px -141px;}
#navigation a.link5 {background-position:0px -188px;}
#navigation a.link5:hover {background-position:-146px -188px;}
#navigation a.link6 {background-position:0px -235px;}
#navigation a.link6:hover {background-position:-146px -235px;}
#navigation a.link7 {background-position:0px -282px;}
#navigation a.link7:hover {background-position:-146px -282px;}
#navigation a.link8 {background-position:0px -329px;}
#navigation a.link8:hover {background-position:-146px -329px;}
#navigation a.link9 {background-position:0px -375px; height:65px;}
#navigation a.link9:hover {background-position:-146px -375px;}


#page{
	position:absolute;
	background-color:#FFFFCC;
	width:600px;
	height:750px;
	left:50%;
	margin-left:-200px;
	top: 135px;
	}
	
</style>

</head>
<body>

<ul id="navigation">
<li><a href="healthfeed.html" class="link1">Health Feed</a></li>
<li><a href="rewards.html" class="link2">Rewards</a></li>
<li><a href="myspot.html" class="link3">My Spot</a></li>
<li><a href="friends.html" class="link4">Friends Spot</a></li>
</ul>

<br/> 





  <title>Firebase Leaderboard Example</title>
  <script type="text/javascript" src="http://static.firebase.com/demo/firebase.js"></script>
  <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
  <link rel="stylesheet" type="text/css" href="http://www.firebase.com/css/example.css">

<body>
<table id="leaderboardTable"></table>
<input type="text" id="nameInput" placeholder="Name">
<input type="text" id="scoreInput" placeholder="Score">
 
<div id="highestscore">
  Highest Score so Far: <span id="highestScoreDiv"></span>
</div>
 
<script type="text/javascript">
  var LEADERBOARD_SIZE = 5;
 
  // Build some firebase references.
  var rootRef = new Firebase('http://demo.firebase.com/guest253197899');
  var scoreListRef = rootRef.child("scoreList");
  var highestScoreRef = rootRef.child("highestScore");
 
  // Keep a mapping of firebase locations to HTML elements, so we can move / remove elements as necessary.
  var htmlForPath = {};
 
  // Helper function that takes a new score snapshot and adds an appropriate row to our leaderboard table.
  function handleScoreAdded(scoreSnapshot, prevScoreName) {
    var newScoreRow = $("<tr/>");
    newScoreRow.append($("<td/>").append($("<em/>").text(scoreSnapshot.val().name)));
    newScoreRow.append($("<td/>").text(scoreSnapshot.val().score));
 
    // Store a reference to the table row so we can get it again later.
    htmlForPath[scoreSnapshot.name()] = newScoreRow;
 
    // Insert the new score in the appropriate place in the table.
    if (prevScoreName === null) {
      $("#leaderboardTable").append(newScoreRow);
    }
    else {
      var lowerScoreRow = htmlForPath[prevScoreName];
      lowerScoreRow.before(newScoreRow);
    }
  }
 
  // Helper function to handle a score object being removed; just removes the corresponding table row.
  function handleScoreRemoved(scoreSnapshot) {
    var removedScoreRow = htmlForPath[scoreSnapshot.name()];
    removedScoreRow.remove();
    delete htmlForPath[scoreSnapshot.name()];
  }
 
  // Create a view to only receive callbacks for the last LEADERBOARD_SIZE scores
  var scoreListView = scoreListRef.limit(LEADERBOARD_SIZE);
 
  // Add a callback to handle when a new score is added.
  scoreListView.on('child_added', function (newScoreSnapshot, prevScoreName) {
    handleScoreAdded(newScoreSnapshot, prevScoreName);
  });
 
  // Add a callback to handle when a score is removed
  scoreListView.on('child_removed', function (oldScoreSnapshot) {
    handleScoreRemoved(oldScoreSnapshot);
  });
 
  // Add a callback to handle when a score changes or moves positions.
  var changedCallback = function (scoreSnapshot, prevScoreName) {
    handleScoreRemoved(scoreSnapshot);
    handleScoreAdded(scoreSnapshot, prevScoreName);
  };
  scoreListView.on('child_moved', changedCallback);
  scoreListView.on('child_changed', changedCallback);
 
  // When the user presses enter on scoreInput, add the score, and update the highest score.
  $("#scoreInput").keypress(function (e) {
    if (e.keyCode == 13) {
      var newScore = Number($("#scoreInput").val());
      var name = $("#nameInput").val()
      $("#scoreInput").val("");
 
      if (name.length === 0)
        return;
 
      var userScoreRef = scoreListRef.child(name);
 
      // Use setWithPriority to put the name / score in Firebase, and set the priority to be the score.
      userScoreRef.setWithPriority({ name:name, score:newScore }, newScore);
 
      // Track the highest score using a transaction.  A transaction guarantees that the code inside the block is
      // executed on the latest data from the server, so transactions should be used if you have multiple
      // clients writing to the same data and you want to avoid conflicting changes.
      highestScoreRef.transaction(function (currentHighestScore) {
        if (currentHighestScore === null || newScore > currentHighestScore) {
          // The return value of this function gets saved to the server as the new highest score.
          return newScore;
        }
        // if we return with no arguments, it cancels the transaction.
        return;
      });
    }
  });
 
  // Add a callback to the highest score in Firebase so we can update the GUI any time it changes.
  highestScoreRef.on('value', function (newHighestScore) {
    $("#highestScoreDiv").text(newHighestScore.val());
  });
 
</script> 





<!-- END OF CENTER COLUMN */ -->

<script src="File.js"></script>




</html>
